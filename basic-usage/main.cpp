/**
 * @file main.cpp
 * @author GJCav 
 * @brief this file shows the basic usage of the Doxygen documentation system
 * @version 0.1
 * @date 2023-07-08
 * @copyright MIT license
 * 
 * This file is the solution to LeetCode problem  <a 
 * href="https://leetcode.cn/problems/global-and-local-inversions">global-and-local-inversions</a>.
 * 
 * @see <a href="https://leetcode.cn/problems/global-and-local-inversions">global-and-local-inversions</a>
 */

#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <string.h>
#include <algorithm>
#include <vector>

using namespace std;

const int max_n = 1e5; /**< maximum array length */
int arr[max_n + 10];   /**< array to hold the input */
int aux[max_n + 10];   /**< auxilary array for merge-sort */

/**
 * @brief type alias for unsigned long long
 * 
 *
 */
using ull = unsigned long long;

ull inv; /**< global variable to hold the number of inversions */

/**
 * @brief merge-sort with inversion counting
 *
 * 中文测试，测试中文。
 * 
 * @param i left bound of the array, inclusive
 * @param j right bound of the array, inclusive
 */
void solve(int i, int j) {
    if (i >= j) return;

    int m = (i + j) / 2;
    solve(i, m);
    solve(m+1, j);
    
    int p = i, q = m+1, k = i;
    while(p <= m || q <= j) {
        if (p > m) {
            aux[k++] = arr[q++];
        } else if (q > j) {
            aux[k++] = arr[p++];
            inv += q - m - 1;
        } else if (arr[p] <= arr[q]) {
            aux[k++] = arr[p++];
            inv += q - m - 1;
        } else {
            aux[k++] = arr[q++];
        }
    }
    for (int p = i; p <= j; p++) arr[p] = aux[p];
}


/**
 * @brief Solution class
 * 
 * This class is generated by the LeetCode system
 */
class Solution {
public:
    /**
     * @brief check if the number of global inversions is equal to the number of local inversions
     *
     * @param nums the input array
     * @return true local inversions is equal to global inversions
     * @return false otherwise
     */
    bool isIdealPermutation(vector<int>& nums) {
        int n = nums.size();
        for (int i = 0; i < n; i++) arr[i] = nums[i];
        inv = 0;
        solve(0, n-1);
        
        ull lcl = 0;
        for (int i = 0;i < n-1;i++) {
            if (nums[i] > nums[i+1]) lcl++;
        }

        cout << "lcl: " << lcl << endl;
        cout << "inv: " << inv << endl;
        return lcl == inv;
    }
};

/**
 * @brief define this macro to run the main function
 * 
 */
#define LOCAL
#ifdef LOCAL

int main (){

    vector<int> v = {0, 2, 3, 1};
    Solution sol;
    cout << sol.isIdealPermutation(v) << endl;

    return 0;
}
#endif